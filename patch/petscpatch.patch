From bb38a7eb220d8edbb9d60bb07594a35783aa397b Mon Sep 17 00:00:00 2001
From: Michael Gegg <michael.gegg@tu-berlin.de>
Date: Wed, 3 May 2017 11:20:31 +0200
Subject: [PATCH 1/2] Patch for c++, float128 and complex, uses c style complex
 numbers.

---
 config/PETSc/options/scalarTypes.py |  4 ++--
 include/petscmath.h                 | 36 ++++++++++++++++++++++++++++++++----
 src/dm/impls/plex/plexpartition.c   |  4 ++--
 src/sys/objects/ftn-custom/zstart.c |  6 +++++-
 src/sys/objects/pinit.c             |  6 +++++-
 5 files changed, 46 insertions(+), 10 deletions(-)

diff --git a/config/PETSc/options/scalarTypes.py b/config/PETSc/options/scalarTypes.py
index 93b4e48..180dfc1 100755
--- a/config/PETSc/options/scalarTypes.py
+++ b/config/PETSc/options/scalarTypes.py
@@ -92,8 +92,8 @@ class Configure(config.base.Configure):
     else:
       raise RuntimeError('--with-precision must be single, double,__float128')
     self.logPrint('Precision is '+str(self.precision))
-    if self.precision == '__float128' and self.scalartype == 'complex' and self.languages.clanguage == 'Cxx':
-      raise RuntimeError('Cannot use --with-precision=__float128 --with-scalar-type=complex and --with-clanguage=cxx because C++ std:complex class has no support for __float128, use --with-clanguage=c')
+    #if self.precision == '__float128' and self.scalartype == 'complex' and self.languages.clanguage == 'Cxx':
+    #  raise RuntimeError('Cannot use --with-precision=__float128 --with-scalar-type=complex and --with-clanguage=cxx because C++ std:complex class has no support for __float128, use --with-clanguage=c')
     return
 
   def configure(self):
diff --git a/include/petscmath.h b/include/petscmath.h
index b330ada..b3c81d6 100644
--- a/include/petscmath.h
+++ b/include/petscmath.h
@@ -109,9 +109,34 @@ typedef __float128 PetscReal;
 /*
     Complex number definitions
  */
-#if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX) && !defined(PETSC_USE_REAL___FLOAT128)
+//#if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX) && !defined(PETSC_USE_REAL___FLOAT128)
+#if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX)
 #if !defined(PETSC_SKIP_COMPLEX)
 #define PETSC_HAVE_COMPLEX 1
+
+#if defined(PETSC_USE_REAL___FLOAT128)
+
+
+#define PetscRealPartComplex(a)      crealq(a)
+#define PetscImaginaryPartComplex(a) cimagq(a)
+#define PetscAbsComplex(a)           cabsq(a)
+#define PetscConjComplex(a)          conjq(a)
+#define PetscSqrtComplex(a)          csqrtq(a)
+#define PetscPowComplex(a,b)         cpowq(a,b)
+#define PetscExpComplex(a)           cexpq(a)
+#define PetscLogComplex(a)           clogq(a)
+#define PetscSinComplex(a)           csinq(a)
+#define PetscCosComplex(a)           ccosq(a)
+#define PetscAsinComplex(a)          casinq(a)
+#define PetscAcosComplex(a)          cacosq(a)
+#define PetscTanComplex(a)           ctanq(a)
+#define PetscSinhComplex(a)          csinhq(a)
+#define PetscCoshComplex(a)          ccoshq(a)
+#define PetscTanhComplex(a)          ctanhq(a)
+
+
+#else
+
 /* C++ support of complex number */
 #if defined(PETSC_HAVE_CUSP)
 #define complexlib cusp
@@ -149,6 +174,7 @@ typedef __float128 PetscReal;
 #else
 #define PetscTanhComplex(a)          PetscSinhComplex(a)/PetscCoshComplex(a)
 #endif
+#endif
 
 #if defined(PETSC_USE_REAL_SINGLE)
 typedef complexlib::complex<float> PetscComplex;
@@ -183,7 +209,9 @@ static inline bool operator!=(const PetscComplex& lhs, const PetscInt& rhs) { re
 static inline bool operator!=(const PetscInt& lhs, const PetscComplex& rhs) { return rhs.imag() != double(0) || rhs.real() != double(lhs); }
 #endif  /* PETSC_USE_CXX_COMPLEX_FLOAT_WORKAROUND */
 #elif defined(PETSC_USE_REAL___FLOAT128)
-typedef complexlib::complex<__float128> PetscComplex; /* Notstandard and not expected to work, use __complex128 */
+//typedef complexlib::complex<__float128> PetscComplex; /* Notstandard and not expected to work, use __complex128 */
+typedef __complex128 PetscComplex;
+#undef PETSC_HAVE_CXX_COMPLEX
 PETSC_EXTERN MPI_Datatype MPIU___COMPLEX128;
 #endif  /* PETSC_USE_REAL_ */
 #endif  /* ! PETSC_SKIP_COMPLEX */
@@ -265,10 +293,10 @@ PETSC_EXTERN MPI_Datatype MPIU___COMPLEX128 PetscAttrMPITypeTag(__complex128);
 #define MPIU_C_DOUBLE_COMPLEX MPI_C_DOUBLE_COMPLEX
 #define MPIU_C_COMPLEX MPI_C_COMPLEX
 #else
-# if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX)
+# if /*defined(__cplusplus) &&*/ defined(PETSC_HAVE_CXX_COMPLEX)
   typedef complexlib::complex<double> petsc_mpiu_c_double_complex;
   typedef complexlib::complex<float> petsc_mpiu_c_complex;
-# elif !defined(__cplusplus) && defined(PETSC_HAVE_C99_COMPLEX)
+# elif /*!defined(__cplusplus) &&*/ defined(PETSC_HAVE_C99_COMPLEX)
   typedef double _Complex petsc_mpiu_c_double_complex;
   typedef float _Complex petsc_mpiu_c_complex;
 # else
diff --git a/src/dm/impls/plex/plexpartition.c b/src/dm/impls/plex/plexpartition.c
index ff23f38..fe98553 100644
--- a/src/dm/impls/plex/plexpartition.c
+++ b/src/dm/impls/plex/plexpartition.c
@@ -1304,8 +1304,8 @@ PetscErrorCode PetscPartitionerPartition_ParMetis(PetscPartitioner part, DM dm,
   PetscInt       wgtflag    = 0;           /* Indicates which weights are present */
   PetscInt       numflag    = 0;           /* Indicates initial offset (0 or 1) */
   PetscInt       ncon       = 1;           /* The number of weights per vertex */
-  PetscReal     *tpwgts;                   /* The fraction of vertex weights assigned to each partition */
-  PetscReal     *ubvec;                    /* The balance intolerance for vertex weights */
+  real_t        *tpwgts;                   /* The fraction of vertex weights assigned to each partition */
+  real_t        *ubvec;                    /* The balance intolerance for vertex weights */
   PetscInt       options[5];               /* Options */
   /* Outputs */
   PetscInt       edgeCut;                  /* The number of edges cut by the partition */
diff --git a/src/sys/objects/ftn-custom/zstart.c b/src/sys/objects/ftn-custom/zstart.c
index b2d83b5..ade3184 100644
--- a/src/sys/objects/ftn-custom/zstart.c
+++ b/src/sys/objects/ftn-custom/zstart.c
@@ -356,7 +356,11 @@ PETSC_EXTERN void PETSC_STDCALL petscinitialize_(CHAR filename PETSC_MIXED_LEN(l
      are not called; at least on IRIX.
   */
   {
-#if defined(PETSC_CLANGUAGE_CXX)
+#if defined(PETSC_USE_REAL___FLOAT128)
+   __float128 ic[2]={0.0,1.0};
+   __complex128 icc=*((__complex128*) &ic);
+   PETSC_i = icc;
+#elif defined(PETSC_CLANGUAGE_CXX)
     PetscComplex ic(0.0,1.0);
     PETSC_i = ic;
 #else
diff --git a/src/sys/objects/pinit.c b/src/sys/objects/pinit.c
index c983ec5..fdc7281 100644
--- a/src/sys/objects/pinit.c
+++ b/src/sys/objects/pinit.c
@@ -812,7 +812,11 @@ PetscErrorCode  PetscInitialize(int *argc,char ***args,const char file[],const c
   */
 #if defined(PETSC_HAVE_COMPLEX)
   {
-#if defined(PETSC_CLANGUAGE_CXX)
+#if defined(PETSC_USE_REAL___FLOAT128)
+   __float128 ic[2]={0.0,1.0};
+   __complex128 icc=*((__complex128*) &ic);
+   PETSC_i = icc;
+#elif defined(PETSC_CLANGUAGE_CXX)
     PetscComplex ic(0.0,1.0);
     PETSC_i = ic;
 #elif defined(PETSC_CLANGUAGE_C)
-- 
2.1.4


From 5c7dc57c88489d2877bbb2356a8258548e241fba Mon Sep 17 00:00:00 2001
From: Michael Gegg <michael.gegg@tu-berlin.de>
Date: Wed, 3 May 2017 11:48:34 +0200
Subject: [PATCH 2/2] Applying Petsc programming style guide

---
 include/petscmath.h                 | 6 ++----
 src/sys/objects/ftn-custom/zstart.c | 6 +++---
 src/sys/objects/pinit.c             | 6 +++---
 3 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/include/petscmath.h b/include/petscmath.h
index b3c81d6..b744ca0 100644
--- a/include/petscmath.h
+++ b/include/petscmath.h
@@ -109,7 +109,6 @@ typedef __float128 PetscReal;
 /*
     Complex number definitions
  */
-//#if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX) && !defined(PETSC_USE_REAL___FLOAT128)
 #if defined(__cplusplus) && defined(PETSC_HAVE_CXX_COMPLEX)
 #if !defined(PETSC_SKIP_COMPLEX)
 #define PETSC_HAVE_COMPLEX 1
@@ -209,7 +208,6 @@ static inline bool operator!=(const PetscComplex& lhs, const PetscInt& rhs) { re
 static inline bool operator!=(const PetscInt& lhs, const PetscComplex& rhs) { return rhs.imag() != double(0) || rhs.real() != double(lhs); }
 #endif  /* PETSC_USE_CXX_COMPLEX_FLOAT_WORKAROUND */
 #elif defined(PETSC_USE_REAL___FLOAT128)
-//typedef complexlib::complex<__float128> PetscComplex; /* Notstandard and not expected to work, use __complex128 */
 typedef __complex128 PetscComplex;
 #undef PETSC_HAVE_CXX_COMPLEX
 PETSC_EXTERN MPI_Datatype MPIU___COMPLEX128;
@@ -293,10 +291,10 @@ PETSC_EXTERN MPI_Datatype MPIU___COMPLEX128 PetscAttrMPITypeTag(__complex128);
 #define MPIU_C_DOUBLE_COMPLEX MPI_C_DOUBLE_COMPLEX
 #define MPIU_C_COMPLEX MPI_C_COMPLEX
 #else
-# if /*defined(__cplusplus) &&*/ defined(PETSC_HAVE_CXX_COMPLEX)
+# if defined(PETSC_HAVE_CXX_COMPLEX)
   typedef complexlib::complex<double> petsc_mpiu_c_double_complex;
   typedef complexlib::complex<float> petsc_mpiu_c_complex;
-# elif /*!defined(__cplusplus) &&*/ defined(PETSC_HAVE_C99_COMPLEX)
+# elif defined(PETSC_HAVE_C99_COMPLEX)
   typedef double _Complex petsc_mpiu_c_double_complex;
   typedef float _Complex petsc_mpiu_c_complex;
 # else
diff --git a/src/sys/objects/ftn-custom/zstart.c b/src/sys/objects/ftn-custom/zstart.c
index ade3184..4f9a2fd 100644
--- a/src/sys/objects/ftn-custom/zstart.c
+++ b/src/sys/objects/ftn-custom/zstart.c
@@ -357,9 +357,9 @@ PETSC_EXTERN void PETSC_STDCALL petscinitialize_(CHAR filename PETSC_MIXED_LEN(l
   */
   {
 #if defined(PETSC_USE_REAL___FLOAT128)
-   __float128 ic[2]={0.0,1.0};
-   __complex128 icc=*((__complex128*) &ic);
-   PETSC_i = icc;
+    __float128   ic[2] = {0.0,1.0};
+    __complex128 icc   = *((__complex128*)&ic);
+    PETSC_i = icc;
 #elif defined(PETSC_CLANGUAGE_CXX)
     PetscComplex ic(0.0,1.0);
     PETSC_i = ic;
diff --git a/src/sys/objects/pinit.c b/src/sys/objects/pinit.c
index fdc7281..6cfd80d 100644
--- a/src/sys/objects/pinit.c
+++ b/src/sys/objects/pinit.c
@@ -813,9 +813,9 @@ PetscErrorCode  PetscInitialize(int *argc,char ***args,const char file[],const c
 #if defined(PETSC_HAVE_COMPLEX)
   {
 #if defined(PETSC_USE_REAL___FLOAT128)
-   __float128 ic[2]={0.0,1.0};
-   __complex128 icc=*((__complex128*) &ic);
-   PETSC_i = icc;
+    __float128   ic[2] = {0.0,1.0};
+    __complex128 icc   = *((__complex128*)&ic);
+    PETSC_i = icc;
 #elif defined(PETSC_CLANGUAGE_CXX)
     PetscComplex ic(0.0,1.0);
     PETSC_i = ic;
-- 
2.1.4

